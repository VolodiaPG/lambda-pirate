From 5c38357908586cc5a027868eb01859118b8a6ac0 Mon Sep 17 00:00:00 2001
From: Pogobanane <aenderboy@gmx.de>
Date: Tue, 15 Jun 2021 13:29:24 +0000
Subject: [PATCH] debug print guest IPs

---
 cri/service.go | 10 +++++-----
 vhive.go       | 10 ++++++++++
 2 files changed, 15 insertions(+), 5 deletions(-)

diff --git a/cri/service.go b/cri/service.go
index 1e24e5c..df00d57 100644
--- a/cri/service.go
+++ b/cri/service.go
@@ -55,7 +55,7 @@ type Service struct {
 	coordinator        *coordinator
 
 	// to store mapping from pod to guest image and port temporarily
-	podVMConfigs map[string]*VMConfig
+	PodVMConfigs map[string]*VMConfig
 }
 
 // VMConfig wraps the IP and port of the guest VM
@@ -87,7 +87,7 @@ func NewService(orch *ctriface.Orchestrator) (*Service, error) {
 		stockRuntimeClient: stockRuntimeClient,
 		stockImageClient:   stockImageClient,
 		coordinator:        newCoordinator(orch),
-		podVMConfigs:       make(map[string]*VMConfig),
+		PodVMConfigs:       make(map[string]*VMConfig),
 	}
 
 	return cs, nil
@@ -139,21 +139,21 @@ func (s *Service) insertPodVMConfig(podID string, vmConfig *VMConfig) {
 	s.Lock()
 	defer s.Unlock()
 
-	s.podVMConfigs[podID] = vmConfig
+	s.PodVMConfigs[podID] = vmConfig
 }
 
 func (s *Service) removePodVMConfig(podID string) {
 	s.Lock()
 	defer s.Unlock()
 
-	delete(s.podVMConfigs, podID)
+	delete(s.PodVMConfigs, podID)
 }
 
 func (s *Service) getPodVMConfig(podID string) (*VMConfig, error) {
 	s.Lock()
 	defer s.Unlock()
 
-	vmConfig, isPresent := s.podVMConfigs[podID]
+	vmConfig, isPresent := s.PodVMConfigs[podID]
 	if !isPresent {
 		log.Errorf("VM config for pod %s does not exist", podID)
 		return nil, errors.New("VM config for pod does not exist")
diff --git a/vhive.go b/vhive.go
index 14e4dd2..ec36780 100644
--- a/vhive.go
+++ b/vhive.go
@@ -30,6 +30,7 @@ import (
 	"net"
 	"os"
 	"runtime"
+	"time"
 
 	ctrdlog "github.com/containerd/containerd/log"
 	fccdcri "github.com/ease-lab/vhive/cri"
@@ -144,6 +145,13 @@ type fwdServer struct {
 	hpb.UnimplementedFwdGreeterServer
 }
 
+func foobar(criService *fccdcri.Service) {
+	for true {
+		fmt.Println(criService.PodVMConfigs)
+		time.Sleep(10 * time.Second)
+	}
+}
+
 func criServe() {
 	lis, err := net.Listen("unix", *criSock)
 	if err != nil {
@@ -159,6 +167,8 @@ func criServe() {
 
 	criService.Register(s)
 
+	go foobar(criService)
+
 	if err := s.Serve(lis); err != nil {
 		log.Fatalf("failed to serve: %v", err)
 	}
-- 
2.31.1

